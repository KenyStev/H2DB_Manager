/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package h2db_manager;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.LayeredHighlighter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author Kenystev
 */
public class Main extends javax.swing.JFrame {

    private HashMap<String, ConnectionData> map;
    private DefaultMutableTreeNode root;
    private JTable columnsPane;
    private JScrollPane scrollpaneColumns;
    private JScrollPane scrollpaneData;
    private JScrollPane scrollpaneDDL;
    private JTextPane ShowSQLtextPlane;
    private JSplitPane SQLSplitSection;
    private JTextPane SQLCommandsPane;
    private JLayeredPane SQLOutputLayer;
    private JScrollPane SQLOutputScroll;
    private JTable SQLOutput;
    private JButton btnEditData;
    private JScrollPane SQLCommandsScroll;
    private JTable dataFromTable;
    private JButton btnInsertData;
    private JButton btnDeleteData;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //create the root node
        root = new DefaultMutableTreeNode("Connections");

        //create the tree by passing in the root node
        ConnectionsTree = new JTree(root);
        ConnectionsTree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent tse) {
                updateColumnsTables();
                updateShowSQL();
                updateDataTabFromTable();
            }
        });
        
        jScrollPane3.setViewportView(ConnectionsTree);
        map = new HashMap<String,ConnectionData>();
        
        ShowSQLtextPlane = new JTextPane();
        scrollpaneColumns = new JScrollPane();
        scrollpaneData = new JScrollPane();
        scrollpaneDDL = new JScrollPane();
        scrollpaneDDL.setViewportView(ShowSQLtextPlane);
        
        initSQLSection();
        
        TabOptions.addTab("SQL", SQLSplitSection);
        TabOptions.addTab("Columns", scrollpaneColumns);
        TabOptions.addTab("Data", scrollpaneData);
        TabOptions.addTab("DDL", scrollpaneDDL);
        
        TabOptions.addChangeListener(new ChangeListener() {
            
            @Override
            public void stateChanged(ChangeEvent ce) {
                updateColumnsTables();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnPlayQuery = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        TabOptions = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        ConnectionOptionsPane = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        btnAddConnection = new javax.swing.JButton();
        btnCloseConnection = new javax.swing.JButton();
        btnDropObject = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ConnectionsTree = new javax.swing.JTree();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        btnCreateSchema = new javax.swing.JMenuItem();
        btnCreateTable = new javax.swing.JMenuItem();
        btnCreateIndex = new javax.swing.JMenuItem();
        btnCreateFunction = new javax.swing.JMenuItem();
        btnCreateView = new javax.swing.JMenuItem();
        btnCreateUser = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnPlayQuery.setText("Play");
        btnPlayQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayQueryActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(btnPlayQuery, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(btnPlayQuery)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(btnPlayQuery))
        );

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.setRightComponent(TabOptions);

        jLabel1.setText("Connections");

        btnAddConnection.setText("+");
        btnAddConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddConnectionActionPerformed(evt);
            }
        });

        btnCloseConnection.setText("Close");
        btnCloseConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseConnectionActionPerformed(evt);
            }
        });

        btnDropObject.setText("Drop");
        btnDropObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropObjectActionPerformed(evt);
            }
        });

        ConnectionOptionsPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ConnectionOptionsPane.setLayer(btnAddConnection, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ConnectionOptionsPane.setLayer(btnCloseConnection, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ConnectionOptionsPane.setLayer(btnDropObject, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout ConnectionOptionsPaneLayout = new javax.swing.GroupLayout(ConnectionOptionsPane);
        ConnectionOptionsPane.setLayout(ConnectionOptionsPaneLayout);
        ConnectionOptionsPaneLayout.setHorizontalGroup(
            ConnectionOptionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectionOptionsPaneLayout.createSequentialGroup()
                .addGroup(ConnectionOptionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(ConnectionOptionsPaneLayout.createSequentialGroup()
                        .addComponent(btnAddConnection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCloseConnection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDropObject)))
                .addGap(0, 32, Short.MAX_VALUE))
        );
        ConnectionOptionsPaneLayout.setVerticalGroup(
            ConnectionOptionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectionOptionsPaneLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ConnectionOptionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddConnection)
                    .addComponent(btnCloseConnection)
                    .addComponent(btnDropObject)))
        );

        jScrollPane3.setViewportView(ConnectionsTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConnectionOptionsPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(ConnectionOptionsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
        );

        jSplitPane1.setTopComponent(jPanel1);

        jMenu4.setText("File");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        btnCreateSchema.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        btnCreateSchema.setText("Create Schema");
        btnCreateSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateSchemaActionPerformed(evt);
            }
        });
        jMenu4.add(btnCreateSchema);

        btnCreateTable.setText("Create Table");
        btnCreateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTableActionPerformed(evt);
            }
        });
        jMenu4.add(btnCreateTable);

        btnCreateIndex.setText("Create Index");
        btnCreateIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateIndexActionPerformed(evt);
            }
        });
        jMenu4.add(btnCreateIndex);

        btnCreateFunction.setText("Create Function");
        btnCreateFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFunctionActionPerformed(evt);
            }
        });
        jMenu4.add(btnCreateFunction);

        btnCreateView.setText("Create View");
        btnCreateView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateViewActionPerformed(evt);
            }
        });
        jMenu4.add(btnCreateView);

        btnCreateUser.setText("Create User");
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });
        jMenu4.add(btnCreateUser);

        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddConnectionActionPerformed
        CreateNewConnectionForm c = new CreateNewConnectionForm(this,true);
        c.setVisible(true);
    }//GEN-LAST:event_btnAddConnectionActionPerformed

    private void btnCloseConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseConnectionActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        if(node != null && map.containsKey(node.toString()))
        {
            ConnectionData cd =  map.get(node.toString());
            try {
                cd.Close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
            }
            map.remove(node.toString());
            root.remove(node);
            ((DefaultTreeModel)ConnectionsTree.getModel()).reload(root);
            System.out.println("Deleted");
        }
    }//GEN-LAST:event_btnCloseConnectionActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        for(ConnectionData c : map.values()){
            try {
                System.out.println("Closing: "+c.getTreeNode());
                c.Close();
            } catch (SQLException ex) {
                
            }
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void btnPlayQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayQueryActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        if(node!=null && node.getLevel()>=1){
            ConnectionData conn = map.get(node.getPath()[1].toString());
            String sql = SQLCommandsPane.getText();
            try(Statement stmt = H2DB_Manager.executeQuery(conn.getConnection(),sql);){
                if(stmt.getUpdateCount()>=0){
                    JLabel msg = new JLabel("Successfully executed query: "+sql);
                    SQLOutputScroll.setViewportView(msg);
                    conn.initDataBaseObjects();
                    ((DefaultTreeModel)ConnectionsTree.getModel()).reload(conn.getTreeNode());
                }else{
                    SQLOutput = new JTable(ConnectionData.buildTableModel(stmt.getResultSet()));
                    SQLOutputScroll.setViewportView(SQLOutput);
                }
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnPlayQueryActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void btnCreateSchemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateSchemaActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "";
        if(node!=null && node.getLevel()>0){
            sql = DDL_Templates.getDDLForCreateSchema(map.get(node.getPath()[1].toString()));
        }
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnCreateSchemaActionPerformed

    private void btnCreateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTableActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "",schema="";
        if(node!=null && node.getLevel()>0){
            if (node.getLevel()>=3) {
                schema = node.getPath()[3].toString();
            }
            
            sql = DDL_Templates.getDDLForCreateTable(map.get(node.getPath()[1].toString()),schema);
        }
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnCreateTableActionPerformed

    private void btnCreateIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateIndexActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "",schema="",table="";
        if(node!=null && node.getLevel()>0){
            if (node.getLevel()>=3) {
                schema = node.getPath()[3].toString();
            }
            
            if (node.getLevel()>=5 && "Tables".equals(node.getPath()[4].toString())) {
                table = node.getPath()[5].toString();
            }
            
            sql = DDL_Templates.getDDLForCreateIndex(map.get(node.getPath()[1].toString()),schema,table);
        }
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnCreateIndexActionPerformed

    private void btnCreateFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFunctionActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "",schema="";
        if(node!=null && node.getLevel()>0){
            if (node.getLevel()>=3) {
                schema = node.getPath()[3].toString();
            }
            
            sql = DDL_Templates.getDDLForCreateFunction(map.get(node.getPath()[1].toString()),schema);
        }
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnCreateFunctionActionPerformed

    private void btnCreateViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateViewActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "",schema="";
        if(node!=null && node.getLevel()>0){
            if (node.getLevel()>=3) {
                schema = node.getPath()[3].toString();
            }
            
            sql = DDL_Templates.getDDLForCreateView(map.get(node.getPath()[1].toString()),schema);
        }
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnCreateViewActionPerformed

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "";
        if(node!=null && node.getLevel()>0){
            sql = DDL_Templates.getDDLForCreateUser(map.get(node.getPath()[1].toString()));
        }
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnCreateUserActionPerformed

    private void btnDropObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropObjectActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "",schema="",table="";
        if (node != null && node.getParent() != null) {
            if(null != node.getParent().toString())
                switch (node.getParent().toString()) {
                    case "Schemas":
                        sql = DDL_Templates.getDDLForDropSchema(node.toString());
                        break;
                    case "Tables":
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        sql = DDL_Templates.getDDLForDropTable(node.toString(),schema);
                        break;
                    case "Functions":
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        sql = DDL_Templates.getDDLForDropFunction(node.toString(),schema);
                        break;
                    case "Views":
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        sql = DDL_Templates.getDDLForDropView(node.toString(),schema);
                        break;
                    case "Indexes":
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        sql = DDL_Templates.getDDLForDropIndex(node.toString(),schema);
                        break;
                    case "Users":
                        sql = DDL_Templates.getDDLForDropUser(node.toString());
                        break;
                    default:
                        break;
                }
        }
        TabOptions.setSelectedIndex(0);
        SQLCommandsPane.setText(sql);
    }//GEN-LAST:event_btnDropObjectActionPerformed

    private void updateColumnsTables() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        if(node != null && node.getLevel()==5){
            System.out.println("parent: "+node.getParent());
            System.out.println("Node: "+node);
            for(TreeNode t : node.getPath())
                System.out.println("--> "+t);
            
            System.out.println(node.getLevel());
            
            if("Tables".equals(node.getParent().toString())){
                ConnectionData conn = map.get(node.getPath()[1].toString());
                try(ResultSet rs = H2DB_Manager.getColumnsForTable(conn.getConnection(),node.getPath()[3].toString(),node.getPath()[5].toString());){
                    columnsPane = new JTable(ConnectionData.buildTableModel(rs));
                    scrollpaneColumns.setViewportView(columnsPane);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }else if("Indexes".equals(node.getParent().toString())){
                ConnectionData conn = map.get(node.getPath()[1].toString());
                try(ResultSet rs = H2DB_Manager.getColumnsForIndex(conn.getConnection(),node.getPath()[3].toString(),node.getPath()[5].toString());){
                    columnsPane = new JTable(ConnectionData.buildTableModel(rs));
                    scrollpaneColumns.setViewportView(columnsPane);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }else if("Functions".equals(node.getParent().toString())){
                ConnectionData conn = map.get(node.getPath()[1].toString());
                try(ResultSet rs = H2DB_Manager.getColumnsForFuncion(conn.getConnection(),node.getPath()[3].toString(),node.getPath()[5].toString());){
                    columnsPane = new JTable(ConnectionData.buildTableModel(rs));
                    scrollpaneColumns.setViewportView(columnsPane);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }else if("Views".equals(node.getParent().toString())){
                ConnectionData conn = map.get(node.getPath()[1].toString());
                try(ResultSet rs = H2DB_Manager.getColumnsForView(conn.getConnection(),node.getPath()[3].toString(),node.getPath()[5].toString());){
                    columnsPane = new JTable(ConnectionData.buildTableModel(rs));
                    scrollpaneColumns.setViewportView(columnsPane);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private void updateShowSQL() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        String sql = "";
        if(node!=null && node.getParent() != null){    
            if ("Schemas".equals(node.getParent().toString()) && !("INFORMATION_SCHEMA".equals(node.toString())
                    && !("PUBLIC".equals(node.toString())))) {
                sql = "CREATE SCHEMA IF NOT EXISTS "+node.toString();
                
                try {
                    String user = H2DB_Manager.getUserOwnerOfSchema(map.get(node.getPath()[1].toString()),node.toString());
                    if(user.length()>0)
                        sql+=" AUTHORIZATION "+user;
                    
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }finally{
                    sql+=";";
                }
            }else if("Tables".equals(node.getParent().toString())){
                try(ResultSet rs = H2DB_Manager.getDDLForTable(map.get(node.getPath()[1].toString()).getConnection()
                        ,node.getPath()[3].toString(),node.getPath()[5].toString())){
                    if(rs.next())
                        sql = rs.getString("SQL") +";";
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
                
            }else if("Indexes".equals(node.getParent().toString())){
                try(ResultSet rs = H2DB_Manager.getDDLForIndex(map.get(node.getPath()[1].toString()).getConnection()
                        ,node.getPath()[3].toString(),node.getPath()[5].toString())){
                    if(rs.next())
                        sql = rs.getString("SQL")+";";
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }else if("Functions".equals(node.getParent().toString())){
                sql = "CREATE ALIAS ";
                try(ResultSet rs = H2DB_Manager.getDDLForFunction(map.get(node.getPath()[1].toString()).getConnection()
                        ,node.getPath()[3].toString(),node.getPath()[5].toString())){
                    if(rs.next())
                        sql = rs.getString("ALIAS_NAME") + " AS $$\n" + rs.getString("SOURCE")+"\n$$;";
                }catch(SQLException ex){
                    sql="";
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }else if("Views".equals(node.getParent().toString())){
                try(ResultSet rs = H2DB_Manager.getDDLForView(map.get(node.getPath()[1].toString()).getConnection()
                        ,node.getPath()[3].toString(),node.getPath()[5].toString())){
                    if(rs.next())
                        sql = rs.getString("VIEW_DEFINITION")+";";
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
            }if ("Users".equals(node.getParent().toString())) {
                sql = "CREATE USER IF NOT EXISTS "+node.toString()+";";
            }
        }
        ShowSQLtextPlane.setText(sql);
    }
    
    private void updateDataTabFromTable() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
        if(node!=null && node.getParent() != null){
            if("Tables".equals(node.getParent().toString())){
                try(ResultSet rs = H2DB_Manager.getDataFromTable(map.get(node.getPath()[1].toString()).getConnection()
                        ,node.getPath()[3].toString(),node.getPath()[5].toString())){
                    dataFromTable = new JTable(ConnectionData.buildTableModel(rs));
                    scrollpaneData.setViewportView(dataFromTable);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
                
            }else if("Views".equals(node.getParent().toString())){
                try(ResultSet rs = H2DB_Manager.getDataFromView(map.get(node.getPath()[1].toString()).getConnection()
                        ,node.getPath()[3].toString(),node.getPath()[5].toString())){
                    dataFromTable = new JTable(ConnectionData.buildTableModel(rs));
                    scrollpaneData.setViewportView(dataFromTable);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
                }
                
            }
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane ConnectionOptionsPane;
    private javax.swing.JTree ConnectionsTree;
    private javax.swing.JTabbedPane TabOptions;
    private javax.swing.JButton btnAddConnection;
    private javax.swing.JButton btnCloseConnection;
    private javax.swing.JMenuItem btnCreateFunction;
    private javax.swing.JMenuItem btnCreateIndex;
    private javax.swing.JMenuItem btnCreateSchema;
    private javax.swing.JMenuItem btnCreateTable;
    private javax.swing.JMenuItem btnCreateUser;
    private javax.swing.JMenuItem btnCreateView;
    private javax.swing.JButton btnDropObject;
    private javax.swing.JButton btnPlayQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    void addConnection(String cn,String user, Connection conn) {
        if(map.containsKey(cn))
        {
            JOptionPane.showMessageDialog(this, "Connection Name already exist", "Something went wrong",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        map.put(cn, new ConnectionData(cn,user,conn));
        root.add(map.get(cn).getTreeNode());
        ((DefaultTreeModel)ConnectionsTree.getModel()).reload(root);
        
        try (Statement stat = conn.createStatement(); ResultSet rs = stat.executeQuery("select * from information_schema.users")) {
            while (rs.next()) {
                System.out.println(rs.getString("name"));
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Something went wrong",JOptionPane.ERROR_MESSAGE);
        }
    }

    private void initSQLSection() {
        SQLSplitSection = new javax.swing.JSplitPane();
        SQLCommandsScroll = new javax.swing.JScrollPane();
        SQLCommandsPane = new javax.swing.JTextPane();
        SQLOutputLayer = new javax.swing.JLayeredPane();
        SQLOutputScroll = new javax.swing.JScrollPane();
        SQLOutput = new javax.swing.JTable();
        btnEditData = new javax.swing.JButton();
        btnInsertData = new javax.swing.JButton();
        btnDeleteData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SQLSplitSection.setDividerLocation(400);
        SQLSplitSection.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        SQLSplitSection.setMinimumSize(new java.awt.Dimension(500, TabOptions.getHeight()));

        SQLCommandsScroll.setViewportView(SQLCommandsPane);

        SQLSplitSection.setTopComponent(SQLCommandsScroll);

        SQLOutputScroll.setViewportView(SQLOutput);

        btnInsertData.setText("Insert");
        btnEditData.setText("Edit");
        btnDeleteData.setText("Delete");
        
        btnInsertData.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
                int column = 0;
                int row = SQLOutput.getSelectedRow();
                int col = SQLOutput.getSelectedColumn();
                String sql = "",schema="",table="";
                if(row>=0){
                    int cols = SQLOutput.getModel().getColumnCount();
                    String[] values = new String[cols], columns = new String[cols];
                    
                    for(column=0;column<cols;column++){
                        values[column] = SQLOutput.getModel().getValueAt(row, column).toString();
                        columns[column] = SQLOutput.getModel().getColumnName(column);
                    }
                    
                    if(node!=null){
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        if (node.getLevel()>=5 && "Tables".equals(node.getPath()[4].toString())) {
                            table = node.getPath()[5].toString();
                        }
                    }
                    
                    sql = DDL_Templates.getDDLForInsertTable(schema,table,columns,values);
                }
                SQLCommandsPane.setText(sql);
            }   
        });
        
        btnEditData.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
                int column = 0;
                int row = SQLOutput.getSelectedRow();
                int col = SQLOutput.getSelectedColumn();
                String sql = "",schema="",table="";
                if(row>=0){
                    int cols = SQLOutput.getModel().getColumnCount();
                    String[] values = new String[cols], columns = new String[cols];
                    
                    for(column=0;column<cols;column++){
                        values[column] = SQLOutput.getModel().getValueAt(row, column).toString();
                        columns[column] = SQLOutput.getModel().getColumnName(column);
                    }
                    
                    if(node!=null){
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        if (node.getLevel()>=5 && "Tables".equals(node.getPath()[4].toString())) {
                            table = node.getPath()[5].toString();
                        }
                    }
                    
                    sql = DDL_Templates.getDDLForUpdateTable(schema,table,columns,values,SQLOutput.getModel().getColumnName(col),SQLOutput.getModel().getValueAt(row, col).toString());
                }
                SQLCommandsPane.setText(sql);
            }
        });
        
        btnDeleteData.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)ConnectionsTree.getLastSelectedPathComponent();
                int column = 0;
                int row = SQLOutput.getSelectedRow();
                int col = SQLOutput.getSelectedColumn();
                String sql = "",schema="",table="";
                if(row>=0){
                    int cols = SQLOutput.getModel().getColumnCount();
                    String[] values = new String[cols], columns = new String[cols];
                    
                    for(column=0;column<cols;column++){
                        values[column] = SQLOutput.getModel().getValueAt(row, column).toString();
                        columns[column] = SQLOutput.getModel().getColumnName(column);
                    }
                    
                    if(node!=null){
                        if (node.getLevel()>=3) {
                            schema = node.getPath()[3].toString();
                        }
                        if (node.getLevel()>=5 && "Tables".equals(node.getPath()[4].toString())) {
                            table = node.getPath()[5].toString();
                        }
                    }
                    
                    sql = DDL_Templates.getDDLForDeleteTable(schema,table,SQLOutput.getModel().getColumnName(col),SQLOutput.getModel().getValueAt(row, col).toString());
                }
                SQLCommandsPane.setText(sql);
            }   
        });

        SQLOutputLayer.setLayer(SQLOutputScroll, javax.swing.JLayeredPane.DEFAULT_LAYER);
        SQLOutputLayer.setLayer(btnInsertData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        SQLOutputLayer.setLayer(btnEditData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        SQLOutputLayer.setLayer(btnDeleteData, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(SQLOutputLayer);
        SQLOutputLayer.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SQLOutputScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addComponent(btnInsertData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteData))
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertData)
                    .addComponent(btnEditData)
                    .addComponent(btnDeleteData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(SQLOutputScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
        );

        SQLSplitSection.setRightComponent(SQLOutputLayer);
    }
}
